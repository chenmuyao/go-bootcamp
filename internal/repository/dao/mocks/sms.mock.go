// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/dao/sms.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/dao/sms.go -package=daomocks -destination=./internal/repository/dao/mocks/sms.mock.go
//

// Package daomocks is a generated GoMock package.
package daomocks

import (
	context "context"
	reflect "reflect"

	dao "github.com/chenmuyao/go-bootcamp/internal/repository/dao"
	gomock "go.uber.org/mock/gomock"
)

// MockAsyncSMSDAO is a mock of AsyncSMSDAO interface.
type MockAsyncSMSDAO struct {
	ctrl     *gomock.Controller
	recorder *MockAsyncSMSDAOMockRecorder
	isgomock struct{}
}

// MockAsyncSMSDAOMockRecorder is the mock recorder for MockAsyncSMSDAO.
type MockAsyncSMSDAOMockRecorder struct {
	mock *MockAsyncSMSDAO
}

// NewMockAsyncSMSDAO creates a new mock instance.
func NewMockAsyncSMSDAO(ctrl *gomock.Controller) *MockAsyncSMSDAO {
	mock := &MockAsyncSMSDAO{ctrl: ctrl}
	mock.recorder = &MockAsyncSMSDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsyncSMSDAO) EXPECT() *MockAsyncSMSDAOMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAsyncSMSDAO) Delete(ctx context.Context, smsInfo dao.SMSInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, smsInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAsyncSMSDAOMockRecorder) Delete(ctx, smsInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAsyncSMSDAO)(nil).Delete), ctx, smsInfo)
}

// GetFirst mocks base method.
func (m *MockAsyncSMSDAO) GetFirst(ctx context.Context) (dao.SMSInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirst", ctx)
	ret0, _ := ret[0].(dao.SMSInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirst indicates an expected call of GetFirst.
func (mr *MockAsyncSMSDAOMockRecorder) GetFirst(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirst", reflect.TypeOf((*MockAsyncSMSDAO)(nil).GetFirst), ctx)
}

// Insert mocks base method.
func (m *MockAsyncSMSDAO) Insert(ctx context.Context, s dao.SMSInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockAsyncSMSDAOMockRecorder) Insert(ctx, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockAsyncSMSDAO)(nil).Insert), ctx, s)
}

// Update mocks base method.
func (m *MockAsyncSMSDAO) Update(ctx context.Context, s dao.SMSInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAsyncSMSDAOMockRecorder) Update(ctx, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAsyncSMSDAO)(nil).Update), ctx, s)
}
