// Code generated by MockGen. DO NOT EDIT.
// Source: ./interactive.go
//
// Generated by this command:
//
//	mockgen -source=./interactive.go -package=daomocks -destination=./mocks/interactive.mock.go
//

// Package daomocks is a generated GoMock package.
package daomocks

import (
	context "context"
	reflect "reflect"

	dao "github.com/chenmuyao/go-bootcamp/internal/repository/dao"
	gomock "go.uber.org/mock/gomock"
)

// MockInteractiveDAO is a mock of InteractiveDAO interface.
type MockInteractiveDAO struct {
	ctrl     *gomock.Controller
	recorder *MockInteractiveDAOMockRecorder
	isgomock struct{}
}

// MockInteractiveDAOMockRecorder is the mock recorder for MockInteractiveDAO.
type MockInteractiveDAOMockRecorder struct {
	mock *MockInteractiveDAO
}

// NewMockInteractiveDAO creates a new mock instance.
func NewMockInteractiveDAO(ctrl *gomock.Controller) *MockInteractiveDAO {
	mock := &MockInteractiveDAO{ctrl: ctrl}
	mock.recorder = &MockInteractiveDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractiveDAO) EXPECT() *MockInteractiveDAOMockRecorder {
	return m.recorder
}

// BatchIncrReadCnt mocks base method.
func (m *MockInteractiveDAO) BatchIncrReadCnt(ctx context.Context, bizs []string, bizIDs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchIncrReadCnt", ctx, bizs, bizIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchIncrReadCnt indicates an expected call of BatchIncrReadCnt.
func (mr *MockInteractiveDAOMockRecorder) BatchIncrReadCnt(ctx, bizs, bizIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchIncrReadCnt", reflect.TypeOf((*MockInteractiveDAO)(nil).BatchIncrReadCnt), ctx, bizs, bizIDs)
}

// DeleteCollectionBiz mocks base method.
func (m *MockInteractiveDAO) DeleteCollectionBiz(ctx context.Context, cb dao.UserCollectionBiz) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollectionBiz", ctx, cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollectionBiz indicates an expected call of DeleteCollectionBiz.
func (mr *MockInteractiveDAOMockRecorder) DeleteCollectionBiz(ctx, cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollectionBiz", reflect.TypeOf((*MockInteractiveDAO)(nil).DeleteCollectionBiz), ctx, cb)
}

// DeleteLikeInfo mocks base method.
func (m *MockInteractiveDAO) DeleteLikeInfo(ctx context.Context, biz string, bizID, uid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLikeInfo", ctx, biz, bizID, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLikeInfo indicates an expected call of DeleteLikeInfo.
func (mr *MockInteractiveDAOMockRecorder) DeleteLikeInfo(ctx, biz, bizID, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLikeInfo", reflect.TypeOf((*MockInteractiveDAO)(nil).DeleteLikeInfo), ctx, biz, bizID, uid)
}

// Get mocks base method.
func (m *MockInteractiveDAO) Get(ctx context.Context, biz string, bizID int64) (dao.Interactive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, biz, bizID)
	ret0, _ := ret[0].(dao.Interactive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInteractiveDAOMockRecorder) Get(ctx, biz, bizID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInteractiveDAO)(nil).Get), ctx, biz, bizID)
}

// GetAll mocks base method.
func (m *MockInteractiveDAO) GetAll(ctx context.Context, biz string, limit, offset int) ([]dao.Interactive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, biz, limit, offset)
	ret0, _ := ret[0].([]dao.Interactive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockInteractiveDAOMockRecorder) GetAll(ctx, biz, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockInteractiveDAO)(nil).GetAll), ctx, biz, limit, offset)
}

// GetByIDs mocks base method.
func (m *MockInteractiveDAO) GetByIDs(ctx context.Context, biz string, ids []int64) ([]dao.Interactive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDs", ctx, biz, ids)
	ret0, _ := ret[0].([]dao.Interactive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs.
func (mr *MockInteractiveDAOMockRecorder) GetByIDs(ctx, biz, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockInteractiveDAO)(nil).GetByIDs), ctx, biz, ids)
}

// GetCollectInfo mocks base method.
func (m *MockInteractiveDAO) GetCollectInfo(ctx context.Context, biz string, bizID, uid int64) (dao.UserCollectionBiz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectInfo", ctx, biz, bizID, uid)
	ret0, _ := ret[0].(dao.UserCollectionBiz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectInfo indicates an expected call of GetCollectInfo.
func (mr *MockInteractiveDAOMockRecorder) GetCollectInfo(ctx, biz, bizID, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectInfo", reflect.TypeOf((*MockInteractiveDAO)(nil).GetCollectInfo), ctx, biz, bizID, uid)
}

// GetLikeInfo mocks base method.
func (m *MockInteractiveDAO) GetLikeInfo(ctx context.Context, biz string, bizID, uid int64) (dao.UserLikeBiz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikeInfo", ctx, biz, bizID, uid)
	ret0, _ := ret[0].(dao.UserLikeBiz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikeInfo indicates an expected call of GetLikeInfo.
func (mr *MockInteractiveDAOMockRecorder) GetLikeInfo(ctx, biz, bizID, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikeInfo", reflect.TypeOf((*MockInteractiveDAO)(nil).GetLikeInfo), ctx, biz, bizID, uid)
}

// IncrReadCnt mocks base method.
func (m *MockInteractiveDAO) IncrReadCnt(ctx context.Context, biz string, bizID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrReadCnt", ctx, biz, bizID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrReadCnt indicates an expected call of IncrReadCnt.
func (mr *MockInteractiveDAOMockRecorder) IncrReadCnt(ctx, biz, bizID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrReadCnt", reflect.TypeOf((*MockInteractiveDAO)(nil).IncrReadCnt), ctx, biz, bizID)
}

// InsertCollectionBiz mocks base method.
func (m *MockInteractiveDAO) InsertCollectionBiz(ctx context.Context, cb dao.UserCollectionBiz) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCollectionBiz", ctx, cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCollectionBiz indicates an expected call of InsertCollectionBiz.
func (mr *MockInteractiveDAOMockRecorder) InsertCollectionBiz(ctx, cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCollectionBiz", reflect.TypeOf((*MockInteractiveDAO)(nil).InsertCollectionBiz), ctx, cb)
}

// InsertLikeInfo mocks base method.
func (m *MockInteractiveDAO) InsertLikeInfo(ctx context.Context, biz string, bizID, uid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLikeInfo", ctx, biz, bizID, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertLikeInfo indicates an expected call of InsertLikeInfo.
func (mr *MockInteractiveDAOMockRecorder) InsertLikeInfo(ctx, biz, bizID, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLikeInfo", reflect.TypeOf((*MockInteractiveDAO)(nil).InsertLikeInfo), ctx, biz, bizID, uid)
}

// MustBatchGet mocks base method.
func (m *MockInteractiveDAO) MustBatchGet(ctx context.Context, biz string, bizIDs []int64) ([]dao.Interactive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustBatchGet", ctx, biz, bizIDs)
	ret0, _ := ret[0].([]dao.Interactive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MustBatchGet indicates an expected call of MustBatchGet.
func (mr *MockInteractiveDAOMockRecorder) MustBatchGet(ctx, biz, bizIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustBatchGet", reflect.TypeOf((*MockInteractiveDAO)(nil).MustBatchGet), ctx, biz, bizIDs)
}
