// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/sms.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/sms.go -package=repomocks -destination=./internal/repository/mocks/sms.mock.go
//

// Package repomocks is a generated GoMock package.
package repomocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAsyncSMSRepository is a mock of AsyncSMSRepository interface.
type MockAsyncSMSRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAsyncSMSRepositoryMockRecorder
	isgomock struct{}
}

// MockAsyncSMSRepositoryMockRecorder is the mock recorder for MockAsyncSMSRepository.
type MockAsyncSMSRepositoryMockRecorder struct {
	mock *MockAsyncSMSRepository
}

// NewMockAsyncSMSRepository creates a new mock instance.
func NewMockAsyncSMSRepository(ctrl *gomock.Controller) *MockAsyncSMSRepository {
	mock := &MockAsyncSMSRepository{ctrl: ctrl}
	mock.recorder = &MockAsyncSMSRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsyncSMSRepository) EXPECT() *MockAsyncSMSRepositoryMockRecorder {
	return m.recorder
}

// AddSMS mocks base method.
func (m *MockAsyncSMSRepository) AddSMS(ctx context.Context, toNb, body, args string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSMS", ctx, toNb, body, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSMS indicates an expected call of AddSMS.
func (mr *MockAsyncSMSRepositoryMockRecorder) AddSMS(ctx, toNb, body, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSMS", reflect.TypeOf((*MockAsyncSMSRepository)(nil).AddSMS), ctx, toNb, body, args)
}

// TrySend mocks base method.
func (m *MockAsyncSMSRepository) TrySend(ctx context.Context, f func(context.Context, string, string, ...string) error, maxRetry int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrySend", ctx, f, maxRetry)
}

// TrySend indicates an expected call of TrySend.
func (mr *MockAsyncSMSRepositoryMockRecorder) TrySend(ctx, f, maxRetry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrySend", reflect.TypeOf((*MockAsyncSMSRepository)(nil).TrySend), ctx, f, maxRetry)
}
