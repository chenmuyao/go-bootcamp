// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go
//
// Generated by this command:
//
//	mockgen -source=./types.go -package=intrcachemocks -destination=./mocks/cache.mock.go
//

// Package intrcachemocks is a generated GoMock package.
package intrcachemocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/chenmuyao/go-bootcamp/interactive/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockInteractiveCache is a mock of InteractiveCache interface.
type MockInteractiveCache struct {
	ctrl     *gomock.Controller
	recorder *MockInteractiveCacheMockRecorder
	isgomock struct{}
}

// MockInteractiveCacheMockRecorder is the mock recorder for MockInteractiveCache.
type MockInteractiveCacheMockRecorder struct {
	mock *MockInteractiveCache
}

// NewMockInteractiveCache creates a new mock instance.
func NewMockInteractiveCache(ctrl *gomock.Controller) *MockInteractiveCache {
	mock := &MockInteractiveCache{ctrl: ctrl}
	mock.recorder = &MockInteractiveCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractiveCache) EXPECT() *MockInteractiveCacheMockRecorder {
	return m.recorder
}

// BatchSet mocks base method.
func (m *MockInteractiveCache) BatchSet(ctx context.Context, biz string, bizIDs []int64, intr []domain.Interactive) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSet", ctx, biz, bizIDs, intr)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchSet indicates an expected call of BatchSet.
func (mr *MockInteractiveCacheMockRecorder) BatchSet(ctx, biz, bizIDs, intr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSet", reflect.TypeOf((*MockInteractiveCache)(nil).BatchSet), ctx, biz, bizIDs, intr)
}

// DecrCollectCntIfPresent mocks base method.
func (m *MockInteractiveCache) DecrCollectCntIfPresent(ctx context.Context, biz string, bizID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrCollectCntIfPresent", ctx, biz, bizID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrCollectCntIfPresent indicates an expected call of DecrCollectCntIfPresent.
func (mr *MockInteractiveCacheMockRecorder) DecrCollectCntIfPresent(ctx, biz, bizID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrCollectCntIfPresent", reflect.TypeOf((*MockInteractiveCache)(nil).DecrCollectCntIfPresent), ctx, biz, bizID)
}

// DecrLikeCntIfPresent mocks base method.
func (m *MockInteractiveCache) DecrLikeCntIfPresent(ctx context.Context, biz string, bizID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrLikeCntIfPresent", ctx, biz, bizID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrLikeCntIfPresent indicates an expected call of DecrLikeCntIfPresent.
func (mr *MockInteractiveCacheMockRecorder) DecrLikeCntIfPresent(ctx, biz, bizID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrLikeCntIfPresent", reflect.TypeOf((*MockInteractiveCache)(nil).DecrLikeCntIfPresent), ctx, biz, bizID)
}

// DecrLikeRank mocks base method.
func (m *MockInteractiveCache) DecrLikeRank(ctx context.Context, biz string, bizID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrLikeRank", ctx, biz, bizID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrLikeRank indicates an expected call of DecrLikeRank.
func (mr *MockInteractiveCacheMockRecorder) DecrLikeRank(ctx, biz, bizID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrLikeRank", reflect.TypeOf((*MockInteractiveCache)(nil).DecrLikeRank), ctx, biz, bizID)
}

// Get mocks base method.
func (m *MockInteractiveCache) Get(ctx context.Context, biz string, bizID int64) (domain.Interactive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, biz, bizID)
	ret0, _ := ret[0].(domain.Interactive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInteractiveCacheMockRecorder) Get(ctx, biz, bizID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInteractiveCache)(nil).Get), ctx, biz, bizID)
}

// GetTopLikedIDs mocks base method.
func (m *MockInteractiveCache) GetTopLikedIDs(ctx context.Context, biz string, limit int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopLikedIDs", ctx, biz, limit)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopLikedIDs indicates an expected call of GetTopLikedIDs.
func (mr *MockInteractiveCacheMockRecorder) GetTopLikedIDs(ctx, biz, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopLikedIDs", reflect.TypeOf((*MockInteractiveCache)(nil).GetTopLikedIDs), ctx, biz, limit)
}

// IncrCollectCntIfPresent mocks base method.
func (m *MockInteractiveCache) IncrCollectCntIfPresent(ctx context.Context, biz string, bizID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrCollectCntIfPresent", ctx, biz, bizID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrCollectCntIfPresent indicates an expected call of IncrCollectCntIfPresent.
func (mr *MockInteractiveCacheMockRecorder) IncrCollectCntIfPresent(ctx, biz, bizID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrCollectCntIfPresent", reflect.TypeOf((*MockInteractiveCache)(nil).IncrCollectCntIfPresent), ctx, biz, bizID)
}

// IncrLikeCntIfPresent mocks base method.
func (m *MockInteractiveCache) IncrLikeCntIfPresent(ctx context.Context, biz string, bizID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrLikeCntIfPresent", ctx, biz, bizID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrLikeCntIfPresent indicates an expected call of IncrLikeCntIfPresent.
func (mr *MockInteractiveCacheMockRecorder) IncrLikeCntIfPresent(ctx, biz, bizID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrLikeCntIfPresent", reflect.TypeOf((*MockInteractiveCache)(nil).IncrLikeCntIfPresent), ctx, biz, bizID)
}

// IncrLikeRank mocks base method.
func (m *MockInteractiveCache) IncrLikeRank(ctx context.Context, biz string, bizID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrLikeRank", ctx, biz, bizID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrLikeRank indicates an expected call of IncrLikeRank.
func (mr *MockInteractiveCacheMockRecorder) IncrLikeRank(ctx, biz, bizID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrLikeRank", reflect.TypeOf((*MockInteractiveCache)(nil).IncrLikeRank), ctx, biz, bizID)
}

// IncrReadCntIfPresent mocks base method.
func (m *MockInteractiveCache) IncrReadCntIfPresent(ctx context.Context, biz string, bizID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrReadCntIfPresent", ctx, biz, bizID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrReadCntIfPresent indicates an expected call of IncrReadCntIfPresent.
func (mr *MockInteractiveCacheMockRecorder) IncrReadCntIfPresent(ctx, biz, bizID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrReadCntIfPresent", reflect.TypeOf((*MockInteractiveCache)(nil).IncrReadCntIfPresent), ctx, biz, bizID)
}

// MustBatchGet mocks base method.
func (m *MockInteractiveCache) MustBatchGet(ctx context.Context, biz string, bizIDs []int64) ([]domain.Interactive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustBatchGet", ctx, biz, bizIDs)
	ret0, _ := ret[0].([]domain.Interactive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MustBatchGet indicates an expected call of MustBatchGet.
func (mr *MockInteractiveCacheMockRecorder) MustBatchGet(ctx, biz, bizIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustBatchGet", reflect.TypeOf((*MockInteractiveCache)(nil).MustBatchGet), ctx, biz, bizIDs)
}

// Set mocks base method.
func (m *MockInteractiveCache) Set(ctx context.Context, biz string, bizID int64, intr domain.Interactive) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, biz, bizID, intr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockInteractiveCacheMockRecorder) Set(ctx, biz, bizID, intr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockInteractiveCache)(nil).Set), ctx, biz, bizID, intr)
}

// SetLikeToZSET mocks base method.
func (m *MockInteractiveCache) SetLikeToZSET(ctx context.Context, biz string, bizId, likeCnt int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLikeToZSET", ctx, biz, bizId, likeCnt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLikeToZSET indicates an expected call of SetLikeToZSET.
func (mr *MockInteractiveCacheMockRecorder) SetLikeToZSET(ctx, biz, bizId, likeCnt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLikeToZSET", reflect.TypeOf((*MockInteractiveCache)(nil).SetLikeToZSET), ctx, biz, bizId, likeCnt)
}

// MockTopArticlesCache is a mock of TopArticlesCache interface.
type MockTopArticlesCache struct {
	ctrl     *gomock.Controller
	recorder *MockTopArticlesCacheMockRecorder
	isgomock struct{}
}

// MockTopArticlesCacheMockRecorder is the mock recorder for MockTopArticlesCache.
type MockTopArticlesCacheMockRecorder struct {
	mock *MockTopArticlesCache
}

// NewMockTopArticlesCache creates a new mock instance.
func NewMockTopArticlesCache(ctrl *gomock.Controller) *MockTopArticlesCache {
	mock := &MockTopArticlesCache{ctrl: ctrl}
	mock.recorder = &MockTopArticlesCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopArticlesCache) EXPECT() *MockTopArticlesCacheMockRecorder {
	return m.recorder
}

// GetTopLikedArticles mocks base method.
func (m *MockTopArticlesCache) GetTopLikedArticles(ctx context.Context) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopLikedArticles", ctx)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopLikedArticles indicates an expected call of GetTopLikedArticles.
func (mr *MockTopArticlesCacheMockRecorder) GetTopLikedArticles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopLikedArticles", reflect.TypeOf((*MockTopArticlesCache)(nil).GetTopLikedArticles), ctx)
}

// SetTopLikedArticles mocks base method.
func (m *MockTopArticlesCache) SetTopLikedArticles(ctx context.Context, articles []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTopLikedArticles", ctx, articles)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTopLikedArticles indicates an expected call of SetTopLikedArticles.
func (mr *MockTopArticlesCacheMockRecorder) SetTopLikedArticles(ctx, articles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTopLikedArticles", reflect.TypeOf((*MockTopArticlesCache)(nil).SetTopLikedArticles), ctx, articles)
}
